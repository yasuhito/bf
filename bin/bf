#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# BrainFuck interpreter.
class Bf
  def initialize
    @memory = [0] * 30_000
    @b = []
    @p = 0
    @x = 0
  end

  # '>'
  def r
    @p += 1 unless @j
  end

  # '<'
  def l
    @p -= 1 unless @j
  end

  # '+'
  def i
    @memory[@p] += 1 unless @j
  end

  # '-'
  def d
    @memory[@p] -= 1 unless @j
  end

  # '.'
  def o
    print @memory[@p].chr unless @j
  end

  # ','
  def n
    @memory[@p] = $stdin.getc unless @j
  end

  # '['
  def j
    @x += 1
    @b[@x] = $ip - 1
    if @j
      return
    elsif  @memory[@p] == 0
      @j = @x
    end
  end

  # ']'
  def e
    if @j == @x
      @j = nil
    elsif @memory[@p] != 0
      $ip = @b[@x]
    end
    @x -= 1
  end
end

bf = Bf.new

$ip = 0

p = $<.readlines.join.tr( '^><+\-.,[]', '' ).tr( '><+\-.,[]', 'rlidonje' )

while $ip < p.size
  bf.send p[$ip].chr
  $ip += 1
end
