#!/usr/bin/env ruby

require 'English'

# BrainFuck interpreter.
class Bf
  METHODS = {
    '>' => :right,
    '<' => :left,
    '+' => :increment,
    '-' => :decrement,
    '.' => :output,
    ',' => :input,
    '[' => :jump,
    ']' => :jump_back,
  }

  def initialize
    @ip = 0
    @pointer = 0
    @memory = Array.new(30_000, 0)
    @jump_start_ip = []
    @jump = nil
  end

  def run(user_input)
    code = user_input.tr('^><+\-.,[]', '')
    read(code[@ip].chr) while @ip < code.size
  end

  private

  def read(command)
    method = METHODS[command]
    return unless method
    __send__ method
    @ip += 1
  end

  def right
    @pointer += 1 unless @jump
  end

  def left
    @pointer -= 1 unless @jump
  end

  def increment
    @memory[@pointer] += 1 unless @jump
  end

  def decrement
    @memory[@pointer] -= 1 unless @jump
  end

  def output
    print @memory[@pointer].chr unless @jump
  end

  def input
    @memory[@pointer] = $stdin.getc unless @jump
  end

  def jump
    @jump_start_ip << @ip - 1
    return if @jump
    @jump = jump_nesting_level if @memory[@pointer] == 0
  end

  def jump_back
    @jump = nil if @jump == jump_nesting_level
    ip = @jump_start_ip.pop
    @ip = ip if @memory[@pointer] != 0
  end

  def jump_nesting_level
    @jump_start_ip.size
  end
end

Bf.new.run($DEFAULT_INPUT.readlines.join)
