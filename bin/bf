#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'English'

# BrainFuck interpreter.
class Bf
  def initialize
    @memory = [0] * 30_000
    @b = []
    @p = 0
    @x = 0
  end

  # '>'
  def r
    @p += 1 unless @j
  end

  # '<'
  def l
    @p -= 1 unless @j
  end

  # '+'
  def i
    @memory[@p] += 1 unless @j
  end

  # '-'
  def d
    @memory[@p] -= 1 unless @j
  end

  # '.'
  def o
    print @memory[@p].chr unless @j
  end

  # ','
  def n
    @memory[@p] = $stdin.getc unless @j
  end

  # '['
  def j(ip)
    @x += 1
    @b[@x] = ip - 1
    if @j
      return
    elsif @memory[@p] == 0
      @j = @x
    end
  end

  # ']'
  def e(ip)
    if @j == @x
      @j = nil
    elsif @memory[@p] != 0
      ip = @b[@x]
    end
    @x -= 1
    ip
  end
end

# Runs BrainFuck interpreter
class BfRunner
  def initialize
    @ip = 0
    @bf = Bf.new
  end

  def run(bf_code)
    code = alphabet_code(bf_code)
    while @ip < code.size
      interpret code[@ip].chr
      @ip += 1
    end
  end

  private

  def alphabet_code(code)
    code.tr('^><+\-.,[]', '').tr('><+\-.,[]', 'rlidonje')
  end

  def interpret(command)
    case command
    when 'j'
      @bf.__send__(command, @ip)
    when 'e'
      @ip = @bf.__send__(command, @ip)
    else
      @bf.__send__ command
    end
  end
end

BfRunner.new.run($DEFAULT_INPUT.readlines.join)
